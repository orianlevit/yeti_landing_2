import { h } from 'preact';
import { renderChildrenAsTextOrHtml } from '../surveys-extension-utils';
import { BottomSection } from './BottomSection';
import { Cancel } from './QuestionHeader';
import { useContext, useEffect } from 'preact/hooks';
import { SurveyContext } from '../surveys-extension-utils';
import { addEventListener } from '../../../utils';
import { window as _window } from '../../../utils/globals';
// We cast the types here which is dangerous but protected by the top level generateSurveys call
var window = _window;
export function ConfirmationMessage(_a) {
    var header = _a.header, description = _a.description, contentType = _a.contentType, forceDisableHtml = _a.forceDisableHtml, appearance = _a.appearance, onClose = _a.onClose;
    var isPopup = useContext(SurveyContext).isPopup;
    useEffect(function () {
        var handleKeyDown = function (event) {
            if (event.key === 'Enter' || event.key === 'Escape') {
                event.preventDefault();
                onClose();
            }
        };
        addEventListener(window, 'keydown', handleKeyDown);
        return function () {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [onClose]);
    return (<div className="thank-you-message" role="status" tabIndex={0} aria-atomic="true">
            {isPopup && <Cancel onClick={function () { return onClose(); }}/>}
            <h3 className="thank-you-message-header">{header}</h3>
            {description &&
            renderChildrenAsTextOrHtml({
                component: h('p', { className: 'thank-you-message-body' }),
                children: description,
                renderAsHtml: !forceDisableHtml && contentType !== 'text',
            })}
            {isPopup && (<BottomSection text={appearance.thankYouMessageCloseButtonText || 'Close'} submitDisabled={false} appearance={appearance} onSubmit={function () { return onClose(); }}/>)}
        </div>);
}
//# sourceMappingURL=ConfirmationMessage.jsx.map